/*
 * This file is generated by jOOQ.
 */
package app.repository.jooq_repo.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import app.repository.jooq_repo.TodoDb;
import app.repository.jooq_repo.tables.records.TodosRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Todos extends TableImpl<TodosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>todo-db.todos</code>
     */
    public static final Todos TODOS = new Todos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TodosRecord> getRecordType() {
        return TodosRecord.class;
    }

    /**
     * The column <code>todo-db.todos.id</code>.
     */
    public final TableField<TodosRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>todo-db.todos.description</code>.
     */
    public final TableField<TodosRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>todo-db.todos.done</code>.
     */
    public final TableField<TodosRecord, Byte> DONE = createField(DSL.name("done"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    private Todos(Name alias, Table<TodosRecord> aliased) {
        this(alias, aliased, null);
    }

    private Todos(Name alias, Table<TodosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>todo-db.todos</code> table reference
     */
    public Todos(String alias) {
        this(DSL.name(alias), TODOS);
    }

    /**
     * Create an aliased <code>todo-db.todos</code> table reference
     */
    public Todos(Name alias) {
        this(alias, TODOS);
    }

    /**
     * Create a <code>todo-db.todos</code> table reference
     */
    public Todos() {
        this(DSL.name("todos"), null);
    }

    public <O extends Record> Todos(Table<O> child, ForeignKey<O, TodosRecord> key) {
        super(child, key, TODOS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : TodoDb.TODO_DB;
    }

    @Override
    public Todos as(String alias) {
        return new Todos(DSL.name(alias), this);
    }

    @Override
    public Todos as(Name alias) {
        return new Todos(alias, this);
    }

    @Override
    public Todos as(Table<?> alias) {
        return new Todos(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Todos rename(String name) {
        return new Todos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Todos rename(Name name) {
        return new Todos(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Todos rename(Table<?> name) {
        return new Todos(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Byte> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super String, ? super Byte, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super String, ? super Byte, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
